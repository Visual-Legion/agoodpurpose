//F(x) = ( $wrapper-width - (n-1)$gutter-width ) / n

.details {
  font-size: 16px;
  color: $grey;
  p {
    line-height: 1.38;
  }
  @include big-phone {
    font-size: 13px;
  }
}

.content_wrapper {
  @include min-macbook {
    width: $wrapper-width;
    text-align: center;
  }
  @include macbook {
    width: 100%;
  }
}

.columns-1 {
  width: $wrapper-width;
}

.columns-2 {
  width: ($wrapper-width - $gutter-width)/2;
}

.columns-3 {
  width: ($wrapper-width - $gutter-width * 2)/3;
}

.columns-4 {
  width: ($wrapper-width - $gutter-width * 3)/4;
}

.columns-6 {
  width: ($wrapper-width - $gutter-width * 5)/6;
}

.columns-8 {
  width: ($wrapper-width - $gutter-width * 7)/8;
}

.columns-12 {
  width: $column-width;
}

// F(x) =  n * $column-width + (n-1) * $gutter-width

.col-1 {
  width: $column-width;
}

.col-2 {
  width: $column-width * 2 + $gutter-width;
}

.col-3 {
  width: $column-width * 3 + 2 * $gutter-width;
}

.col-4 {
  width: $column-width * 4 + 3 * $gutter-width;
}

.col-6 {
  // width: $column-width * 6 + 5 * $gutter-width;
  // bug? check when not tired :D
  width: 50%;
}

.col-8 {
  width: $column-width * 8 + 7 * $gutter-width;
}

.col-9 {
  width: $column-width * 9 + 8 * $gutter-width;
}

.col-10 {
  width: $column-width * 10 + 9 * $gutter-width;
}

.col-12 {
  width: $column-width * 12 + 11 * $gutter-width;
}

.col {
  &:first-child {
    margin-right: $gutter-width;
  }
  &:last-child {
    margin-right: $gutter-width;
  }
  &:not(:first-child):not(:last-child) {
    margin-right: $gutter-width/2;
    margin-left: $gutter-width/2;
  }
}

.col-4,
.col-8,
.col-6 {
  padding: 10px;
  @include divi {
    width: 100%;
  }
}

// $wrapper-width: 1280px;
// $gutter-width: 20px;
// $column-width: 88px;

html,
body {
  font-size: $body;
  line-height: $line-height-base;
  color: $black;
  @include big-phone {
    font-size: $font-size-base-mobile;
    line-height: $line-height-base-mobile;
  }
}

body {
  margin: auto;

  .error {
    color: $error;
  }

  section {
    transition: all 0.4s ease-in-out;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  span,
  a {
    margin: 0;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-align: left;

    // @include divi {
    //   text-align: center;
    // }
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  h1 span,
  h2 span,
  h3 span,
  h4 span,
  h5 span,
  h6 span {
    font-family: $heading_font;
    font-weight: $body-weight;
    line-height: $line-height-base-headings;
  }
  h1,
  h1 span,
  h2,
  h2 span {
    font-size: $h1;
    font-weight: 300;
    line-height: 1.23;
    @include big-phone {
      font-size: $h2;
    }
  }
  // h2,
  // h2 span {
  //   font-size: $h2;
  //   line-height: 1.32;
  //   @include big-phone {
  //     font-size: $h3;
  //   }
  // }
  h3,
  h3 span {
    font-size: $h3;
    line-height: 1.32;
    @include big-phone {
      font-size: $h4;
    }
  }
  h4,
  h4 span {
    font-size: $h4;
  }
  h5,
  h5 span {
    font-size: $h5;
  }
  p,
  span,
  ul,
  ol,
  li,
  a {
    font-weight: $body_weight;
    font-family: $body_font;
    // line-height: 1.78;
    line-height: 1.5;
  }

  // a,
  // button,
  // input[type="button"],
  // input[type="submit"] {
  //   font-family: $heading_font;
  // }

  .note {
    font-size: 20px;
    line-height: 1.35;
  }
}

//button

// p, ul, ol, pre, table, blockquote {
//   margin-top: 0px;
//   margin-bottom: 21px;
// }
// ul ul, ol ol, ul ol, ol ul {
//   margin-top: 0px;
//   margin-bottom: 0px;
// }

// hr, .hr {
//   border: 1px solid;
//   margin: -1px 0;
// }
// a, b, i, strong, em, small, code {
//   line-height: 0;
// }
// sub, sup {
//   line-height: 0;
//   position: relative;
//   vertical-align: baseline;
// }
// sup {
//   top: -0.5em;
// }
// sub {
//   bottom: -0.25em;
// }

/* Loader */

.loader {
  position: fixed;
  left: 0px;
  top: 0px;
  width: 100%;
  height: 100%;
  z-index: 9999;
  background: white;
  background-size: 100px;
  font-family: $heading_font;
  &.parent:before {
    display: none;
  }
  .content_wrapper {
    text-align: center;
    img {
      width: 200px;
      margin-bottom: 20px;
    }
    color: $base_color;
    font-size: $body;
    [class*="loader-"] {
      display: block;
      width: 1em;
      height: 1em;
      color: inherit;
      vertical-align: middle;
      pointer-events: none;
      margin: 0px auto 0;
    }
    .loader-05 {
      border: 0.2em solid transparent;
      border-top-color: currentcolor;
      border-radius: 50%;
      animation: 1s loader-05 linear infinite;
      position: relative;
      &:before {
        content: "";
        display: block;
        width: inherit;
        height: inherit;
        position: absolute;
        top: -0.2em;
        left: -0.2em;
        border: 0.2em solid currentcolor;
        border-radius: 50%;
        opacity: 0.5;
      }
    }

    @keyframes loader-05 {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  }
}

.utopia_wrapper {
  // Thanks https://codepen.io/cipherbeta/pen/YLdVjw?page=1&

  background: linear-gradient(
    271deg,
    #f98f48,
    #dba987,
    #bdc1a1,
    #94ceb8,
    #08d0c1
  );
  background-size: 1000% 1000%;
  height: 100%;

  display: flex;
  justify-content: center;
  align-items: center;

  -webkit-animation: AnimationName 10s linear infinite;
  -moz-animation: AnimationName 10s linear infinite;
  animation: AnimationName 10s linear infinite;

  @-webkit-keyframes AnimationName {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  @-moz-keyframes AnimationName {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
  @keyframes AnimationName {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  // .glitch {
  //   position: relative;
  // }
  // .glitch::before,
  // .glitch::after {
  //   content: attr(data-text);
  //   position: absolute;
  //   top: 0;
  //   left: 0;
  //   width: 100%;
  //   height: 100%;
  // }

  // Here's the meat and potatoes.

  /* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
  @mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .glitch {
    position: relative;
    color: white;
    font-size: 4em;
    letter-spacing: 0.5em;

    @include ipad {
      font-size: 2em;
    }

    /* Animation provies a slight random skew. Check bottom of doc
  for more information on how to random skew. */
    animation: glitch-skew 1s infinite linear alternate-reverse;

    // Creates a copy before our text.
    &::before {
      // Duplicates our text with the mixin.
      @include glitchCopy;
      // Scoots text slightly to the left for the color offset.
      left: 2px;
      // Creates the color 'shadow' that happens on the glitch.
      text-shadow: -2px 0 #ff00c1;
      /* Creates an initial clip for our glitch. This works in
    a typical top,right,bottom,left fashion and creates a mask
    to only show a certain part of the glitch at a time. */
      clip: rect(44px, 450px, 56px, 0);
      /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
    with an alternating animation to keep things fresh. */
      animation: glitch-anim 5s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
      @include glitchCopy;
      left: -2px;
      text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
      animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
  }

  /* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
  @keyframes glitch-anim {
    $steps: 20;
    @for $i from 0 through $steps {
      #{percentage($i*(1/$steps))} {
        clip: rect(random(100) + px, 9999px, random(100) + px, 0);
        transform: skew((random(100) / 100) + deg);
      }
    }
  }

  // Same deal, just duplicated for ultra randomness.
  @keyframes glitch-anim2 {
    $steps: 20;
    @for $i from 0 through $steps {
      #{percentage($i*(1/$steps))} {
        clip: rect(random(100) + px, 9999px, random(100) + px, 0);
        transform: skew((random(100) / 100) + deg);
      }
    }
  }

  // Does the same deal as before, but now only skews. Used for main text.
  @keyframes glitch-skew {
    $steps: 10;
    @for $i from 0 through $steps {
      #{percentage($i*(1/$steps))} {
        transform: skew((random(10) - 5) + deg);
      }
    }
  }
}

/* Like */

.likebtn-wrapper.lb-style-custom {
  .lb-like,
  .lb-dislike {
    background-color: transparent;
    border: none;
  }
}

/* slide action */
/* maybe include later with js for <ipad */

@include min-ipad {
  .slide-down,
  .slide-left,
  .slide-right,
  .slide-up {
    will-change: transform;
    transition: all 1s ease-in-out;
    transition-delay: 0.5s;
  }

  .active {
    .slide-down,
    .slide-left,
    .slide-right,
    .slide-up {
      transform: translate(0);
      opacity: 1;
      &.s-absolute {
        @include divi {
          transform: translateX(-50%) scale(0.8);
        }
      }
    }
  }

  .slide-down {
    opacity: 0;
    transform: translate(0, -1000%);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-left {
    opacity: 0;
    transform: translate(1000%, 0);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-right {
    opacity: 0;
    transform: translate(-1000%, 0);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-up {
    opacity: 0;
    transform: translate(0, 1000%);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
}

$animation-duration: 2s;

.loader {
  // opacity: 1;
  // animation-duration: 0.5s;
  // animation-fill-mode: forwards;

  // animation-iteration-count: 1;
  // animation-timing-function: ease-in-out;
  // animation-direction: normal;
  // animation-name: loader-fade-out;

  // animation-delay: 1.5s;

  .animated-text-wrapper {
    span {
      display: inline-block;
      opacity: 0;
      will-change: auto;
      transform: translate3d(0, 100vh, 0);
      margin: 0 5px;
      font-size: 21px;
    }
    &.loading {
      animation-duration: 2s;
      animation-delay: 2s;
      animation-fill-mode: forwards;

      animation-iteration-count: infinite;
      animation-timing-function: ease-in-out;
      animation-direction: normal;
      animation-name: text-beat;
    }

    span {
      animation-duration: 2s;
      // animation-duration: 4s;
      animation-fill-mode: forwards;

      animation-iteration-count: 1;
      animation-timing-function: ease-in-out;
      animation-direction: normal;
      // animation-name: text-animate-up;
      animation-name: text-animate-up-fade-in;

      @for $i from 1 through 100 {
        // for each $col_#{i}
        &:nth-child(#{$i}) {
          animation-delay: $i * 0.05s;
        }
      }
      // &.loaded {
      //    animation-name: ;
      // }
    }
  }
}

.loader-rectangle {
  transition: all 0.2s ease-in-out;
  position: fixed;
  bottom: 0;
  width: 100vw;

  // height: 0;
  height: 100vh;
  background-color: $brown;
  z-index: 10000;
  transform: translateY(-100vh);

  &.animate {
    animation-duration: 1s;
    // animation-delay: 4s;
    animation-fill-mode: forwards;

    animation-iteration-count: 1;
    animation-timing-function: ease-in-out;
    animation-direction: normal;
    animation-name: rect-animate-up;
  }
}

@keyframes text-animate-up {
  0% {
    opacity: 0;
    transform: translate3d(0, 100vh, 0);
  }
  20% {
    transform: translate3d(0, 0, 0);
  }
  40% {
    opacity: 1;
  }
  60% {
    opacity: 1;
  }
  80% {
    transform: translate3d(0, 0, 0);
  }
  100% {
    opacity: 0;
    transform: translate3d(0, -100vh, 0);
  }
}

@keyframes text-animate-up-fade-in {
  0% {
    opacity: 0;
    transform: translate3d(0, 100vh, 0);
  }
  50% {
    transform: translate3d(0, 0, 0);
  }
  100% {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }
}
@keyframes text-animate-up-fade-out {
  0% {
    // opacity: 1;
    transform: translate3d(0, 0, 0);
  }
  50% {
    transform: translate3d(0, 0, 0);
  }
  100% {
    opacity: 0;
    transform: translate3d(0, -100vh, 0);
  }
}

@keyframes text-beat {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.2;
  }
  100% {
    opacity: 1;
  }
}

// @keyframes rect-animate-up {
//   0% {
//     bottom: 0;
//     top: initial;
//     height: 0;
//   }
//   50% {
//     height: 100vh;
//   }
//   51% {
//     // bottom: initial;
//     top: 0;
//     height: 100vh;
//   }
//   100% {
//     bottom: initial;
//     top: 0;
//     height: 0;
//   }
// }

// @keyframes loader-fade-out {
//   0% {
//     opacity: 1;
//   }
//   100% {
//     opacity: 0;
//   }
// }

@keyframes rect-animate-up {
  0% {
    transform: translateY(100vh);
  }
  50% {
    transform: translateY(00vh);
  }
  100% {
    transform: translateY(-100vh);
  }
}

// @keyframes text-animate-up {
//   0% {
//     opacity: 0;
//     transform: translate3d(0, 100vh, 0);
//   }
//   50% {
//     transform: translate3d(0, 0, 0);
//   }
//   100% {
//     transform: translate3d(0, 0, 0);
//     opacity: 1;
//   }
//   // 100% {
//   //   transform: translate3d(0, 0, 0);
//   //   opacity: 0;
//   // }
// }
